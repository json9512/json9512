*[GeeksforGeeks](https://www.geeksforgeeks.org/data-structures/)*
# Binary Tree
- hierarchical data structure
- each node has at most two nodes

Binary Tree Representation
- pointer to the topmost node
- if tree is empty, the root value is NULL

Binary tree can be traversed in two ways
- Breadth First Traversal: Level Order Traversal
- Depth First Traversal: Inorder (left-root-right), Preorder (root-left-right), Postorder (left-right-root)

- Maximum number of nodes at level l=2^(l-1) 
- Maximum number of nodes = 2^(h+1) - 1
    - h is the height of the tree
    - height is the number of edges on a path from root to leaf
- Minimum possible height = ceil(Log (base 2) (n+1)) - 1
- In BT, number of leaf nodes is always one more than nodes with two children
- Time complexity of tree traversal: O(n)
- Useful when data has hierarchical structure. eg. Javascript DOM (HTML tags)

# Binary Search Tree
BST is a Binary Tree with the following properties:
- The left subtree of a node contains only nodes with key less than the current node's key
- The right subtree of a node contains only nodes with key greater than the current node's key
- The left and right subtree must be binary search trees

Time complexity:
- Search O(h)
- Insertion O(h)
- Deletion O(h), h = height of tree
- Extra Space: O(n) for pointers, n = number of nodes in BST
- If binary search tree is height balanced: h = O(Log n)
- Self-balancing BST such as AVL tree, Red-Black tree, Splay Tree make sure that h is always O(log n)

BST provide moderate access/search (quicker than Linked List, slower than array)<br>
BST provide moderate insertion/deletion (quicker than array, slower than linked list)<br>
Used in situations where data is constantly entering/leaving and data needs to be displayed sorted. eg. e-commerce products page

# Binary Heap
Binary Heap is a binary tree with the following properties:
- is a complete tree (All levels are completely filled except possibly the last level. Last level has all keys to the left as possible). -> suitable to be stored in an array
- BH is either MinHeap or MaxHeap. In MinHeap, key at root must be the minimum (vice versa for max heap). The same property is recursively true for all nodes.
- cannot be used for searching of a particular element

Time complexity:
- Get Min or Max from Min/Max heap: O(1)
- Extract Min or Max from Min/Max heap: O(log n)
- Decrease key in Min or Max from Min/Max heap: O(log n)
- Insert: O(log n)
- Delete: O(log n)

Used in implementing efficient priority-queues.

# Hashing/Hash function
a function that converts a given big input key to smaller practical integer value. The mapped integer value is used as an index in hash table.

A good hash function should have the following:
- computational efficiency
- uniform distribution of the keys

**Hash Table**: an array that stores pointers to records corresponding to a given phone number. 
An entry in hash table is NIL if no existing phone number has hash function value equal to the index of the entry.

**Collision Handling**: hash functions can create duplicate value (index). If newly inserted data is mapped to an occupied value (index) in the hash table,
collision handling should be used to avoid collision.

1. Chaining: each hash value points to a linked list. Multiple data can share the same hash value. Easy to implement, but need more space outside the hash table.
2. Open Addressing: all elements are stored in hash table. each table entry is a record or NIL. Searches for the next available entry to insert entry.

Time/Space complexity:
- Space: O(n)
- Search: O(1) average O(n) worst
- Insertion: O(1) average O(n) worst
- Deletion: O(1) average O(n) worst

eg. Python dict data type is a hash table

